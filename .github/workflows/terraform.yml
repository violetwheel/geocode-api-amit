name: "Terraform CI CD"

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  id-token: write
  contents: read


jobs:
  Terraform_plan:
    name: "Terraform Plan & Validate"
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./build/terraform
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::466725796063:role/github_actions_role
          aws-region: ap-south-1

      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create Zip for lambda
        run: npm run compress

         # Install the selected version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform init
        id: init
        run: terraform init

        # Run a terraform fmt to check syntax
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # Run a terraform validate
      - name: Terraform Validate
        id: validate
        run: terraform validate  -no-color

      # Run a terraform plan
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color

      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  Terraform_Deploy:
    name: "Terraform Validate and Apply"
    needs: Terraform_plan
    runs-on: ubuntu-latest
    #environment: Development
    defaults:
     run:
      shell: bash
      # We keep Terraform files in the terraform directory.
      working-directory: ./build/terraform
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::820509719511:role/github-terraform-role
          aws-region: us-east-1

      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create Zip for lambda
        run: npm run compress

        # Install the selected version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.3

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform init
        id: init
        run: terraform init

        # Run a terraform validate
      - name: Terraform Validate
        id: validate
        run: terraform validate  -no-color

        # Run a terraform apply
      - name: Terraform Apply
        run: terraform apply  -auto-approve
